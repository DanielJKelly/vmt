import React from 'react';
import PropTypes from 'prop-types';
import moment from 'moment';
import Button from '../UI/Button/Button';
import classes from './chat.css';

const Message = React.forwardRef((props, ref) => {
  const {
    message,
    showReference,
    onClick,
    highlighted,
    id,
    referencing,
    reference,
  } = props;
  let highlightClass = '';
  let referenceClass = '';
  let referenceArrow = null;
  if (highlighted) {
    highlightClass = classes.Highlight;
  }
  if (reference) {
    referenceClass = classes.Reference;
    referenceArrow = (
      <Button
        theme="Arrow"
        click={showReference}
        type="button"
        id={message._id}
        data-testid={message._id}
      >
        {message.reference.elementType === 'chat_message' ? (
          <i className="fas fa-arrow-up" />
        ) : (
          <i className="fas fa-arrow-left" />
        )}
      </Button>
    );
  }
  if (message) {
    const oneWeekAgo = moment().subtract(7, 'days');
    const oneYearAgo = moment().subtract(1, 'year');
    const momentTimestamp = moment.unix(message.timestamp / 1000);

    let format = 'ddd h:mm:ss a';
    if (momentTimestamp.isBefore(oneYearAgo)) {
      format = 'MMMM Do YYYY, h:mm:ss a';
    } else if (momentTimestamp.isBefore(oneWeekAgo)) {
      format = 'MMMM Do, h:mm:ss a';
    }

    const formattedTimestamp = momentTimestamp.format(format);

    return (
      <div
        key={id}
        ref={ref}
        className={[
          message.autogenerated ? classes.VmtBotEntry : classes.Entry,
          referenceClass,
          highlightClass,
        ].join(' ')}
        style={{
          cursor: message.reference || referencing ? 'pointer' : 'auto',
          color: message.color,
        }}
      >
        <div>
          <b>{message.autogenerated ? 'VMTbot' : message.user.username}: </b>
          <span> {referenceArrow} </span>
          <span
            onClick={onClick}
            onKeyPress={onClick}
            role="button"
            tabIndex="0"
            data-testid={`msg-${id}`}
          >
            {message.text}
          </span>
        </div>
        {/* CONSIDER CONDITIONALLLY FORMATIING THE DATE BASED ON HOW FAR IN THE PAST IT IS
              IF IT WAS LAST WEEK, SAYING THE DAY AND TIME IS MISLEADING */}
        <div className={classes.Timestamp}>{formattedTimestamp}</div>
      </div>
    );
  }
  return null;
});

Message.propTypes = {
  message: PropTypes.shape({}).isRequired,
  highlighted: PropTypes.bool,
  id: PropTypes.string.isRequired,
  referencing: PropTypes.bool,
  reference: PropTypes.bool.isRequired,
  onClick: PropTypes.func.isRequired,
};

Message.defaultProps = {
  highlighted: false,
  referencing: false,
};
export default Message;
