import React, { Component } from 'react';
import classes from './Log.Styles.css';
import * as ReactDOM from 'react-dom';
import moment from 'moment';
class Log extends Component {
  // constructor(props){
  //   super(props)
  //
  // }
  // focusedEntry = React.createRef();

  componentDidUpdate(prevProps){
    console.log('current index: ', this.props.currentIndex)
    console.log('prev index: ', prevProps.currentIndex)
    if (prevProps.currentIndex !== this.props.currentIndex){
      this.scrollToPosition();
    }
  }

  scrollToPosition(){
    console.log('scrolling!')
    const currentEntry = this.refs[this.props.currentIndex]
    console.log(currentEntry)
    // console.log(currentEntry.offset())
    // console.log(currentEntry.offsetParent.offsetTop)
    console.log(this.refs.log.offsetTop)
    console.log(currentEntry.offsetTop)
    const offset = currentEntry.offsetTop - this.refs.log.offsetTop;
    this.refs.log.scrollBottom = 0;
    ReactDOM.findDOMNode(this.refs.log).scrollTop = offset;
    // currentEntry.scrollIntoView({ behavior: "smooth" });
    // this.forceUpdate()

  }

  render() {
    console.log('rendering log')
    console.log(this.props.log)
    return (
      <div ref='log' className={classes.Log}>
        {
          this.props.log.map((event, i) => {
            let entry;
            if (event.text) {
              entry = <div>
                <div>{moment.unix(event.timestamp/1000).format('MM/DD/YYYY h:mm:ss A')}</div>
                {event.autogenerated ?
                  <div>{event.text}</div> : <div>{event.user.username}: {event.text}</div>
                }
              </div>
            }
            else if (event.synthetic) {
              entry = <div>{event.message}</div>
            } else {
              entry = <div>
                <div>{moment.unix(event.timestamp/1000).format('MM/DD/YYYY h:mm:ss A')}</div>
                <div>{event._id} by {event.user}</div>
              </div>
            }
            if (i === this.props.currentIndex) {
              console.log('adding a ref to element: ', i)
              return <div ref={i} className={classes.Entry} style={{color: 'red'}} key={i}>{entry}</div>
            } else {
              return <div className={classes.Entry} style={{color: 'red'}} key={i}>{entry}</div>
            }
          })
        }
      </div>
    )
  }
}

export default Log;
