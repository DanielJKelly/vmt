:import('../../colors.css'){
  gridBlue: gridBlue;
  darkBlue: darkBlue;
}

@keyframes move_wave {
  0% {transform: translateX(0) translateZ(0) scaleY(1)}
  50% {transform: translateX(-25%) translateZ(0) scaleY(.65)}
  100% {transform: translateX(-50%) translateZ(0) scaleY(1)}
}

@keyframes move_wave_2 {
  0% {transform: translateX(0) translateZ(0) scaleY(1)}
  50% {transform: translateX(-25%) translateZ(0) scaleY(.25)}
  100% {transform: translateX(-50%) translateZ(0) scaleY(1)}
}
.backgroundGraph {
  position: absolute;
  top: 58%;
  bottom: 0;
  left: 0;
  right: 0;
  /* overflow-x: hidden; */
  background-size: 25px 25px;
  background-image: linear-gradient(to right, gridBlue .5px, transparent 1px), linear-gradient(to bottom, gridBlue .5px, transparent 1px) !important;
  font-family: 'Voces', 'sans-serif';
  z-index: 20;
  height: 42vh
}
.waveWrapper {
  overflow: hidden;
  position: absolute;
  left: 0;
  right: 0;
  bottom: 30%;
  top: 0;
  margin: auto;
}
.waveWrapperInner {
  position: absolute;
  width: 100%;
  overflow: hidden;
  height: 100%;
  bottom: -1px;
  background-image: linear-gradient(to top, #d4edfc 1%, gridBlue 15%, darkBlue 100%);
}
.bgTop {
  z-index: 15;
  opacity: 0.7;
}
.bgMiddle {
  z-index: 16;
  opacity: .7;
}
.bgBottom {
  z-index: 17;
  opacity: .4;
}
.wave {
  position: absolute;
  left: 0;
  width: 200%;
  height: 100%;
  background-repeat: repeat no-repeat;
  background-position: 0 bottom;
  transform-origin: center bottom;
}
.waveTop {
  background-size: 50% 100px;
  background-image: url('./wave-top.png')
}
.waveAnimation .bgTop {
  animation: move-wave 3s linear infinite;
  /* -webkit-animation: move-wave 3s;
  -webkit-animation-delay: 1s;
  animation-delay: 1s; */
}
.waveMiddle {
  background-size: 50% 120px;
  background-image: url('./wave-mid.png')
}
.waveAnimation .waveMiddle {
  animation: move_wave 10s linear infinite;
}
.waveBottom {
  background-size: 50% 100px;
  background-image: url('./wave-bot.png')
}
.waveAnimation .waveBottom {
  animation: move_wave 15s linear infinite;
}